// Generated by CoffeeScript 1.12.5
(function() {
  var ASPECT_RATIO, app, prepSprites, run,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  console.log("-----PICO-----");

  console.log("Credits:");

  console.log("Art --- Fiona Okumu");

  console.log("Programming --- Jacob Silcoff");

  console.log("Documentation --- Francesca Chu");

  console.log("CSGO Analysis --- Freya Ryd");

  console.log("Music --- AJ Stensland");


  /*
  _____________________
  GRAPHICS
  _____________________
   */

  app = void 0;

  ASPECT_RATIO = void 0;

  document.addEventListener('DOMContentLoaded', function(ev) {
    return prepSprites();
  });

  prepSprites = function() {
    var i, j, len, results, srcs, str;
    ASPECT_RATIO = {
      width: window.innerWidth,
      height: window.innerHeight
    };
    PIXI.settings.SCALE_MODE = PIXI.SCALE_MODES.NEAREST;
    app = new PIXI.Application(ASPECT_RATIO.width, ASPECT_RATIO.height, {
      backgroundColor: 0xFFFFFF
    });
    document.body.appendChild(app.view);
    srcs = ["boat.png", "Coney1.png", "Coney2.png", "Coney3.png", "hook.png", "JackRainbowFish.png", "LionFish.png", "MahiMahi.png", "Marlin.png", "SpottedHog.png", "WhaleShark.png", "day.png", "GUI.png", "sand.png", "sky.png", "water.png", "sky.png", "waves.png", "Bubble.png", "Title.png", "clouds/0.png", "clouds/1.png", "clouds/2.png", "sky/0.png", "sky/1.png", "sky/2.png", "sky/3.png", "sky/4.png", "sun.png", "moon.png", "tut/0.png", "tut/1.png", "tut/2.png", "tut/3.png", "tut/4.png"];
    i = 0;
    results = [];
    for (j = 0, len = srcs.length; j < len; j++) {
      str = srcs[j];
      results.push((function(_this) {
        return function() {
          var spr, tex;
          tex = PIXI.Texture.fromImage("res/" + str);
          spr = new PIXI.Sprite(tex);
          return tex.addListener('update', function(ev) {
            i = i + 1;
            if (i >= srcs.length) {
              return run();
            }
          });
        };
      })(this)());
    }
    return results;
  };

  run = function() {
    var Background, Bubble, Coney1, Coney2, Coney3, DeathDisplay, Fish, GUI, GameSummary, GoalDisplay, Hook, JackRainbowFish, Level, LionFish, MahiMahi, Marlin, SpottedHog, TitleScreen, Tutorial, WhaleShark, addFish, angTo, background, backgroundLayer, boatLayer, bubbles, checkLevelWon, clearConsole, clearScreen, currentLevel, currentLevelNum, cutScenesLayer, displSprites, displayCatch, displayLevel, distance, fish, fishCaught, fishLayer, gameStats, gs, gui, guiLayer, hook, levelActive, loseLevel, music, nextLevel, normalizeAng, pause, pickupAudio, playThenDo, playThenDoFunction, printAng, random, relocateHook, replace, startLevel, startPlayingLevel, title, toomanyAudio, topWaveLayer, tutorial, winLevel;
    pause = false;
    tutorial = null;
    gameStats = {
      fishCaught: 0,
      errors: 0,
      lionfish: 0,
      boosts: 0,
      deaths: 0
    };
    currentLevelNum = null;
    levelActive = false;
    gs = null;
    playThenDoFunction = function() {};

    /*
    _____________________
    Structure
    _____________________
     */

    /*
    Some Math Stuff
     */
    angTo = function(a, b) {
      var ang;
      if (a.x === b.x) {
        return normalize(a.y < b.y ? Math.PI : -Math.PI);
      }
      ang = Math.atan((b.y - a.y) / (b.x - a.x));
      if (b.x < a.x) {
        ang += Math.PI;
      }
      return normalizeAng(ang);
    };
    distance = function(x1, y1, x2, y2) {
      var sqr;
      sqr = function(a) {
        return a * a;
      };
      return Math.sqrt(sqr(x1 - x2) + sqr(y1 - y2));
    };
    normalizeAng = function(t) {
      while (t < 0) {
        t += 2 * Math.PI;
      }
      while (t > 2 * Math.PI) {
        t -= 2 * Math.PI;
      }
      return t;
    };
    printAng = function(a) {
      return console.log((Math.floor(a / Math.PI * 1000) / 1000) + "pi");
    };
    random = function(a, b) {
      return Math.floor(Math.random() * (b - a)) + a;
    };
    clearConsole = function() {
      var consl;
      consl = void 0;
      if (typeof console._commandLineAPI !== 'undefined') {
        consl = console._commandLineAPI;
      } else if (typeof console._inspectorCommandLineAPI !== 'undefined') {
        consl = console._inspectorCommandLineAPI;
      } else if (typeof console.clear !== 'undefined') {
        consl = console;
      }
      return consl != null ? consl.clear() : void 0;
    };

    /*
    Layer groups
     */
    backgroundLayer = new PIXI.Container();
    fishLayer = new PIXI.Container();
    boatLayer = new PIXI.Container();
    topWaveLayer = new PIXI.Container();
    guiLayer = new PIXI.Container();
    cutScenesLayer = new PIXI.Container();
    app.stage.addChild(backgroundLayer);
    app.stage.addChild(boatLayer);
    app.stage.addChild(topWaveLayer);
    app.stage.addChild(fishLayer);
    app.stage.addChild(guiLayer);
    app.stage.addChild(cutScenesLayer);

    /*
    Classes
    &
    Vars
     */
    background = null;
    title = null;
    Background = (function() {
      var backWaveSpeed, frontWaveSpeed, waveOffset;

      Background.waterLevel = 350;

      frontWaveSpeed = 0.5;

      backWaveSpeed = 0.3;

      waveOffset = 10;

      function Background(depth) {
        this.depth = depth;
        this.water = null;
        this.frontWaves = null;
        this.bottom = null;
        this.sky = null;
        this.draw();
      }

      Background.prototype.draw = function() {
        var i, j, len, len1, len2, len3, m, o, p, pos, q, ref, ref1, ref2, ref3, results, scl, spr, sun, t, waveScale, x;
        this.sky = [];
        (function(_this) {
          return (function() {
            var skyNum, tempSky;
            skyNum = currentLevelNum != null ? currentLevelNum : 1;
            tempSky = PIXI.Sprite.fromImage("res/sky/" + skyNum + ".png");
            tempSky.x = 0;
            tempSky.y = -5;
            tempSky.width = ASPECT_RATIO.width;
            tempSky.height = Background.waterLevel + 10;
            backgroundLayer.addChild(tempSky);
            return _this.sky.push(tempSky);
          });
        })(this)();
        if (currentLevelNum == null) {
          currentLevelNum = 1;
        }
        pos = currentLevelNum / 3 * Math.PI;
        sun = null;
        if (currentLevelNum === 4) {
          sun = PIXI.Sprite.fromImage("res/moon.png");
          sun.scale.set(10);
          pos = 3 / 4 * Math.PI;
        } else {
          sun = PIXI.Sprite.fromImage("res/sun.png");
        }
        sun.anchor.set(.5);
        sun.x = ASPECT_RATIO.width / 2 - Math.cos(pos) * (ASPECT_RATIO.width / 3);
        sun.y = Background.waterLevel - 75 - Math.sin(pos) * (Background.waterLevel - 75);
        backgroundLayer.addChild(sun);
        this.sky.push(sun);
        for (i = j = 0; j < 3; i = ++j) {
          spr = PIXI.Sprite.fromImage("res/clouds/" + i + ".png");
          spr.anchor.set(.5, 1);
          spr.x = random(0, ASPECT_RATIO.width);
          spr.y = random(5, Background.waterLevel - 10);
          backgroundLayer.addChild(spr);
          this.sky.push(spr);
        }
        this.water = PIXI.Sprite.fromImage("res/water.png");
        this.water.width = ASPECT_RATIO.width;
        this.water.height = this.depth;
        this.water.x = 0;
        this.water.y = Background.waterLevel;
        backgroundLayer.addChild(this.water);
        this.bottom = PIXI.Sprite.fromImage('res/sand.png');
        scl = ASPECT_RATIO.width / this.bottom.width;
        this.bottom.scale.set(scl);
        this.bottom.anchor.set(0, 1);
        this.bottom.x = 0;
        this.bottom.y = this.depth + this.water.y;
        backgroundLayer.addChild(this.bottom);
        this.frontWaves = [];
        this.backWaves = [];
        waveScale = 2;
        x = -(waveScale * (new PIXI.Sprite.fromImage('res/waves.png')).width);
        i = 0;
        results = [];
        while (x < ASPECT_RATIO.width) {
          ref = [this.frontWaves, this.backWaves];
          for (m = 0, len = ref.length; m < len; m++) {
            t = ref[m];
            t.push(new PIXI.Sprite.fromImage('res/waves.png'));
          }
          ref1 = [this.frontWaves, this.backWaves];
          for (o = 0, len1 = ref1.length; o < len1; o++) {
            t = ref1[o];
            t[i].scale.set(waveScale);
          }
          ref2 = [this.frontWaves, this.backWaves];
          for (p = 0, len2 = ref2.length; p < len2; p++) {
            t = ref2[p];
            t[i].anchor.set(0, 1);
          }
          ref3 = [this.frontWaves, this.backWaves];
          for (q = 0, len3 = ref3.length; q < len3; q++) {
            t = ref3[q];
            t[i].x = x;
          }
          this.frontWaves[i].y = Background.waterLevel + waveOffset;
          this.backWaves[i].y = Background.waterLevel;
          topWaveLayer.addChild(this.frontWaves[i]);
          backgroundLayer.addChild(this.backWaves[i]);
          x += this.frontWaves[i].width;
          results.push(i++);
        }
        return results;
      };

      Background.prototype.update = function() {
        var j, l, len, len1, len2, m, minX, o, ref, ref1, ref2, results, w, wave;
        ref = this.frontWaves;
        for (j = 0, len = ref.length; j < len; j++) {
          w = ref[j];
          w.x += frontWaveSpeed;
        }
        ref1 = this.backWaves;
        for (m = 0, len1 = ref1.length; m < len1; m++) {
          w = ref1[m];
          w.x += backWaveSpeed;
        }
        ref2 = [this.frontWaves, this.backWaves];
        results = [];
        for (o = 0, len2 = ref2.length; o < len2; o++) {
          l = ref2[o];
          results.push((function() {
            var len3, len4, p, q, results1;
            results1 = [];
            for (p = 0, len3 = l.length; p < len3; p++) {
              wave = l[p];
              if (wave.x > ASPECT_RATIO.width) {
                minX = 0;
                for (q = 0, len4 = l.length; q < len4; q++) {
                  w = l[q];
                  minX = Math.min(w.x, minX);
                }
                wave.x = minX - wave.width;
                break;
              } else {
                results1.push(void 0);
              }
            }
            return results1;
          })());
        }
        return results;
      };

      Background.prototype.move = function(x, y) {
        var el, j, len, len1, len2, len3, len4, len5, m, o, p, q, ref, ref1, ref2, ref3, ref4, ref5, results, s, wave;
        this.water.x += x;
        this.water.y += y;
        this.bottom.x += x;
        this.bottom.y += y;
        ref = this.frontWaves;
        for (j = 0, len = ref.length; j < len; j++) {
          wave = ref[j];
          wave.x += x;
        }
        ref1 = this.frontWaves;
        for (m = 0, len1 = ref1.length; m < len1; m++) {
          wave = ref1[m];
          wave.y += y;
        }
        ref2 = this.backWaves;
        for (o = 0, len2 = ref2.length; o < len2; o++) {
          wave = ref2[o];
          wave.x += x;
        }
        ref3 = this.backWaves;
        for (p = 0, len3 = ref3.length; p < len3; p++) {
          wave = ref3[p];
          wave.y += y;
        }
        ref4 = this.sky;
        for (q = 0, len4 = ref4.length; q < len4; q++) {
          el = ref4[q];
          el.x += x;
        }
        ref5 = this.sky;
        results = [];
        for (s = 0, len5 = ref5.length; s < len5; s++) {
          el = ref5[s];
          results.push(el.y += y);
        }
        return results;
      };

      Background.prototype.clear = function() {
        var el, j, len, len1, len2, m, o, ref, ref1, ref2, results, wave;
        backgroundLayer.removeChild(this.water);
        ref = this.frontWaves;
        for (j = 0, len = ref.length; j < len; j++) {
          wave = ref[j];
          topWaveLayer.removeChild(wave);
        }
        ref1 = this.backWaves;
        for (m = 0, len1 = ref1.length; m < len1; m++) {
          wave = ref1[m];
          backgroundLayer.removeChild(wave);
        }
        backgroundLayer.removeChild(this.bottom);
        ref2 = this.sky;
        results = [];
        for (o = 0, len2 = ref2.length; o < len2; o++) {
          el = ref2[o];
          results.push(backgroundLayer.removeChild(el));
        }
        return results;
      };

      Background.prototype.reset = function() {
        var j, len, len1, m, ref, ref1, wave;
        this.water.y = Background.waterLevel;
        ref = this.frontWaves;
        for (j = 0, len = ref.length; j < len; j++) {
          wave = ref[j];
          wave.y = Background.waterLevel + waveOffset;
        }
        ref1 = this.backWaves;
        for (m = 0, len1 = ref1.length; m < len1; m++) {
          wave = ref1[m];
          wave.y = Background.waterLevel;
        }
        return this.bottom.y = this.water.y + this.depth;
      };

      return Background;

    })();
    fish = [];
    bubbles = [];
    displSprites = [];
    Hook = (function() {
      var boatScale, boostAudio, hookScale, padding;

      hookScale = .2;

      boatScale = 8;

      padding = 100;

      boostAudio = new Audio('res/Boost.mp3');

      Hook.speed = 5;

      function Hook() {
        this.velocity = new PIXI.Point(0, 0);
        this.boostCount = 0;
        this.lineTool = new PIXI.Graphics;
        this.hookSprite = PIXI.Sprite.fromImage('res/hook.png');
        this.hookSprite.scale.x = this.hookSprite.scale.y = hookScale;
        this.hookSprite.anchor.set(.5);
        this.boatSprite = PIXI.Sprite.fromImage('res/boat.png');
        this.boatSprite.scale.x = this.boatSprite.scale.y = boatScale;
        this.boatSprite.scale.x *= -1;
        this.boatSprite.anchor.set(.5, 1);
        this.boatSprite.x = this.hookSprite.x = ASPECT_RATIO.width / 2;
        this.boatSprite.y = Background.waterLevel;
        this.hookSprite.y = this.boatSprite.y + 100;
        this.boostFilter = new PIXI.filters.ColorMatrixFilter();
        boatLayer.addChild(this.hookSprite);
        boatLayer.addChild(this.boatSprite);
        boatLayer.addChild(this.lineTool);
        this.drawLine();
        this.realY = this.hookSprite.y;
      }

      Hook.prototype.update = function() {
        var mat;
        if (this.boostCount > 0) {
          this.boostCount--;
          this.hookSprite.filters = [this.boostFilter];
          mat = this.boostFilter.matrix;
          mat[1] = Math.sin(this.boostCount / 10) * 3;
          mat[2] = Math.cos(this.boostCount / 10);
          mat[3] = Math.cos(this.boostCount / 10) * 1.5;
          mat[4] = Math.sin(this.boostCount / 30) * 2;
          mat[5] = Math.sin(this.boostCount / 20);
          mat[6] = Math.sin(this.boostCount / 40);
        } else {
          this.hookSprite.filters = null;
        }
        if (fishCaught.LionFish >= 10) {
          fishCaught.LionFish = 0;
          gameStats.boosts++;
          boostAudio.load();
          boostAudio.play();
          return this.boostCount = 1000;
        }
      };

      Hook.prototype.move = function(x, y) {
        var b, f, hy, j, len, len1, m, ref;
        if (this.boostCount > 0) {
          x *= 2;
        }
        if (this.boostCount > 0) {
          y *= 2;
        }
        y = Math.floor(y * 1000) / 1000;
        if ((0 < (ref = this.boatSprite.x + x) && ref < ASPECT_RATIO.width) && x !== 0) {
          this.boatSprite.x += x;
          this.hookSprite.x += x;
          if ((x > 0) !== (this.boatSprite.scale.x < 0)) {
            this.boatSprite.scale.x *= -1;
          }
        }
        hy = this.hookSprite.y;
        if ((hy > padding + this.boatSprite.y || y > 0) && (hy <= ASPECT_RATIO.height - padding || y < 0) && this.realY <= hy) {
          this.hookSprite.y += y;
          this.realY = this.hookSprite.y;
          background.reset();
          this.boatSprite.y = Background.waterLevel;
        } else if (hy >= ASPECT_RATIO.height - padding && (y < 0 || hy + padding <= background.water.y + background.depth)) {
          this.realY += y;
          this.boatSprite.y = Math.floor((this.boatSprite.y - y) * 1000) / 1000;
          background.move(0, -y);
          for (j = 0, len = fish.length; j < len; j++) {
            f = fish[j];
            f.y -= y;
          }
          for (m = 0, len1 = bubbles.length; m < len1; m++) {
            b = bubbles[m];
            b.spr.y -= y;
          }
        }
        return this.drawLine();
      };

      Hook.prototype.drawLine = function() {
        var color, dir, thickness, x1, xShift, y1, yShift;
        thickness = 1;
        color = 0xffd900;
        xShift = 0;
        yShift = -26;
        this.lineTool.clear();
        this.lineTool.lineStyle(thickness, color, 1);
        dir = Math.abs(this.boatSprite.scale.x) / this.boatSprite.scale.x;
        x1 = this.boatSprite.x + (this.boatSprite.width / 2 * .97) * dir;
        y1 = this.boatSprite.y - this.boatSprite.height * .67;
        this.lineTool.moveTo(x1, y1);
        return this.lineTool.bezierCurveTo(x1, y1, x1, this.hookSprite.y, this.hookSprite.x + xShift, this.hookSprite.y + yShift);
      };

      Hook.prototype.clear = function() {
        this.lineTool.clear();
        boatLayer.removeChild(this.hookSprite);
        return boatLayer.removeChild(this.boatSprite);
      };

      return Hook;

    })();
    Tutorial = (function() {
      function Tutorial() {
        var i, j, scl, spr, tex;
        this.images = [];
        for (i = j = 0; j < 5; i = ++j) {
          tex = PIXI.Texture.fromImage("res/tut/" + i + ".png");
          spr = new PIXI.Sprite(tex);
          this.images.push(spr);
          spr.anchor.set(.5);
          spr.x = ASPECT_RATIO.width / 2;
          spr.y = ASPECT_RATIO.height / 2;
          scl = Math.min(ASPECT_RATIO.width / spr.width, ASPECT_RATIO.height / spr.height);
          spr.scale.set(scl);
        }
        this.show(0);
      }

      Tutorial.prototype.show = function(i) {
        var bigStyle, j, k, len, ref, ref1, ref2, ref3, regStyle, str;
        this["in"] = false;
        guiLayer.removeChildren();
        guiLayer.addChild(this.images[i]);
        regStyle = new PIXI.TextStyle({
          fontSize: 32,
          fontFamily: "'Press Start 2P', cursive",
          fill: "#ffffff",
          stroke: "#000000",
          strokeThickness: 5
        });
        bigStyle = new PIXI.TextStyle({
          fontSize: 36,
          fontFamily: "'Press Start 2P', cursive",
          fill: "#ffffff",
          stroke: "#000000",
          strokeThickness: 5
        });
        str = i === this.images.length - 1 ? "DONE" : "NEXT";
        this.nextButton = new PIXI.Text(str, regStyle);
        this.prevButton = i > 0 ? new PIXI.Text("PREVIOUS", regStyle) : null;
        ref = [this.nextButton, this.prevButton];
        for (j = 0, len = ref.length; j < len; j++) {
          k = ref[j];
          if (k != null) {
            k.interactive = true;
          }
          if (k != null) {
            k.buttonMode = true;
          }
          if (k != null) {
            k.anchor.set(.5);
          }
          if (k != null) {
            k.y = ASPECT_RATIO.height - k.height - 15;
          }
          if (k != null) {
            guiLayer.addChild(k);
          }
        }
        this.nextButton.x = ASPECT_RATIO.width - this.nextButton.width / 2 - 20;
        if (this.prevButton != null) {
          this.prevButton.x = this.prevButton.x + this.prevButton.width / 2 + 20;
        }
        this.nextButton.on('pointerover', (function(_this) {
          return function() {
            _this.nextButton.style = bigStyle;
            if (!_this["in"]) {
              (new Audio('res/Click.mp3')).play();
            }
            return _this["in"] = true;
          };
        })(this));
        this.nextButton.on('pointerout', (function(_this) {
          return function() {
            _this.nextButton.style = regStyle;
            return _this["in"] = false;
          };
        })(this));
        this.nextButton.on('pointerdown', (function(_this) {
          return function() {
            _this["in"] = true;
            if (i < _this.images.length - 1) {
              return tutorial.show(i + 1);
            } else {
              return _this.end();
            }
          };
        })(this));
        if ((ref1 = this.prevButton) != null) {
          ref1.on('pointerover', (function(_this) {
            return function() {
              _this.prevButton.style = bigStyle;
              if (!_this["in"]) {
                (new Audio('res/Click.mp3')).play();
              }
              return _this["in"] = true;
            };
          })(this));
        }
        if ((ref2 = this.prevButton) != null) {
          ref2.on('pointerout', (function(_this) {
            return function() {
              _this.prevButton.style = regStyle;
              return _this["in"] = false;
            };
          })(this));
        }
        return (ref3 = this.prevButton) != null ? ref3.on('pointerdown', (function(_this) {
          return function() {
            tutorial.show(i - 1);
            return _this["in"] = true;
          };
        })(this)) : void 0;
      };

      Tutorial.prototype.end = function() {
        tutorial = null;
        clearScreen();
        return new TitleScreen;
      };

      return Tutorial;

    })();
    hook = new Hook();
    relocateHook = function() {
      return hook.boatSprite.y = Background.waterLevel;
    };
    fishCaught = {
      Coney1: 0,
      Coney2: 0,
      Coney3: 0,
      JackRainbowFish: 0,
      LionFish: 0,
      MahiMahi: 0,
      Marlin: 0,
      SpottedHog: 0,
      WhaleShark: 0
    };
    Bubble = (function() {
      function Bubble(x, y) {
        var sizeRange;
        sizeRange = [10, 30];
        this.spr = PIXI.Sprite.fromImage('res/Bubble.png');
        this.spr.x = x;
        this.spr.y = y;
        this.spr.width = this.spr.height = random(sizeRange[0], sizeRange[1]);
        bubbles.push(this);
        fishLayer.addChild(this.spr);
      }

      Bubble.prototype.update = function() {
        this.spr.x += random(0, 4) - 2;
        this.spr.y -= 3;
        if (this.spr.y < background.water.y) {
          return this.clear();
        }
      };

      Bubble.prototype.clear = function() {
        var pop;
        pop = new Audio('res/pop.wav');
        pop.play();
        fishLayer.removeChild(this.spr);
        return bubbles.splice(bubbles.indexOf(this), 1);
      };

      return Bubble;

    })();
    Fish = (function(superClass) {
      var padding;

      extend(Fish, superClass);

      padding = 100;

      function Fish(title1) {
        var r, xvals;
        this.title = title1 != null ? title1 : false;
        Fish.__super__.constructor.call(this);
        this.size = 1;
        fishLayer.addChild(this);
        this.x = this.y = void 0;
        this.rotation = 0;
        xvals = [-padding, ASPECT_RATIO.width + padding];
        while (!((this.x != null) && (this.y != null) && distance(this.x, this.y, hook.hookSprite.x, hook.hookSprite.y) > 200)) {
          r = random(0, 2);
          if (this.title) {
            this.rotation = Math.PI * r;
          }
          this.x = xvals[r];
          this.y = random(background.water.y + 10, background.water.y + background.depth);
        }
        this.height = 20;
        this.width = 20;
        this.speed = (Math.random()) + 1;
        this.turnRad = 0.1;
        this.sprite = void 0;
        this.tracking = true;
      }

      Fish.prototype.draw = function() {
        this.sprite.anchor.set(.5);
        this.sprite.x = this.sprite.y = 0;
        this.sprite.scale.x *= this.size;
        this.sprite.scale.y *= this.size;
        return this.addChild(this.sprite);
      };

      Fish.prototype.update = function() {
        var aim, i, j, len, lim, ref, ref1, ref2, ref3, results;
        if (!this.title) {
          this.rotation = normalizeAng(this.rotation);
          this.x += this.speed * Math.cos(this.rotation);
          if ((this.y > padding + background.water.y) || (Math.sin(this.rotation) >= 0)) {
            this.y += this.speed * Math.sin(this.rotation);
          }
          if (this.tracking) {
            aim = angTo(this, hook.hookSprite);
            if (((aim - this.rotation) + 2 * Math.PI) % (2 * Math.PI) < Math.PI) {
              this.rotation += this.turnRad;
            }
            if (((aim - this.rotation) + 2 * Math.PI) % (2 * Math.PI) > Math.PI) {
              this.rotation -= this.turnRad;
            }
            if (Math.abs(aim - this.rotation) < this.turnRad || 2 * Math.PI - Math.abs(aim - this.rotation) < this.turnRad) {
              this.rotation = aim;
            }
          } else {
            this.rotation = (Math.PI > (ref = this.rotation) && ref > Math.PI / 2) ? Math.PI : 0;
            if (this.x >= ASPECT_RATIO.width) {
              this.rotation = Math.PI;
            }
            if (this.x <= 0) {
              this.rotation = 0;
            }
          }
          if (((Math.PI * 3 / 2 > (ref1 = this.rotation) && ref1 > Math.PI / 2)) !== (this.sprite.scale.y < 0)) {
            this.sprite.scale.y *= -1;
          }
          if (this.sprite.containsPoint(new PIXI.Point(hook.hookSprite.x, hook.hookSprite.y))) {
            this.getCaught();
          }
        } else {
          if (((Math.PI * 3 / 2 > (ref2 = this.rotation) && ref2 > Math.PI / 2)) !== (this.sprite.scale.y < 0)) {
            this.sprite.scale.y *= -1;
          }
          this.rotation = normalizeAng(this.rotation);
          this.x += this.speed * Math.cos(this.rotation);
          if (this.x < -this.sprite.width || this.x > ASPECT_RATIO.width + this.sprite.width) {
            this.rotation += Math.PI;
          }
        }
        if (random(0, 1000) < 5) {
          lim = random(3, 6);
          ref3 = [0, lim];
          results = [];
          for (j = 0, len = ref3.length; j < len; j++) {
            i = ref3[j];
            results.push(new Bubble(this.x, this.y + i * 5));
          }
          return results;
        }
      };

      Fish.prototype.getCaught = function() {
        fish.splice(fish.indexOf(this), 1);
        return this.clear();
      };

      Fish.prototype.clear = function() {
        this.removeChild(this.sprite);
        return this.destroy;
      };

      Fish.prototype.print = function() {
        return console.log("FISH");
      };

      return Fish;

    })(PIXI.Container);
    JackRainbowFish = (function(superClass) {
      var scl;

      extend(JackRainbowFish, superClass);

      scl = 0.6;

      function JackRainbowFish(b) {
        if (b == null) {
          b = false;
        }
        JackRainbowFish.__super__.constructor.call(this, b);
        this.speed = (Math.random()) + 2.5;
        this.turnRad = 0.03;
        this.sprite = PIXI.Sprite.fromImage('res/JackRainbowFish.png');
        this.sprite.scale.x *= scl;
        this.sprite.scale.y *= scl;
        this.sprite.scale.x *= -1;
        this.draw();
      }

      JackRainbowFish.prototype.print = function() {
        return console.log("JACKFISH");
      };

      JackRainbowFish.prototype.getCaught = function() {
        JackRainbowFish.__super__.getCaught.call(this);
        fishCaught.JackRainbowFish++;
        return displayCatch("JackRainbowFish");
      };

      return JackRainbowFish;

    })(Fish);
    Marlin = (function(superClass) {
      var scl;

      extend(Marlin, superClass);

      scl = 1;

      function Marlin(b) {
        if (b == null) {
          b = false;
        }
        Marlin.__super__.constructor.call(this, b);
        this.speed = (Math.random()) + 3;
        this.turnRad = 0.06;
        this.sprite = PIXI.Sprite.fromImage('res/Marlin.png');
        this.sprite.scale.x *= scl;
        this.sprite.scale.y *= scl;
        this.sprite.scale.x *= -1;
        this.draw();
      }

      Marlin.prototype.print = function() {
        return console.log("MARLIN");
      };

      Marlin.prototype.getCaught = function() {
        Marlin.__super__.getCaught.call(this);
        fishCaught.Marlin++;
        return displayCatch("Marlin");
      };

      return Marlin;

    })(Fish);
    Coney1 = (function(superClass) {
      var scl;

      extend(Coney1, superClass);

      scl = 0.3;

      function Coney1(b) {
        if (b == null) {
          b = false;
        }
        Coney1.__super__.constructor.call(this, b);
        this.speed = (Math.random()) + 1.5;
        this.turnRad = 0.02;
        this.sprite = PIXI.Sprite.fromImage('res/Coney1.png');
        this.sprite.scale.x *= scl;
        this.sprite.scale.y *= scl;
        this.sprite.scale.x *= -1;
        this.draw();
      }

      Coney1.prototype.print = function() {
        return console.log("Coney 1");
      };

      Coney1.prototype.getCaught = function() {
        Coney1.__super__.getCaught.call(this);
        fishCaught.Coney1++;
        return displayCatch("Coney1");
      };

      return Coney1;

    })(Fish);
    Coney2 = (function(superClass) {
      var scl;

      extend(Coney2, superClass);

      scl = 0.3;

      function Coney2(b) {
        if (b == null) {
          b = false;
        }
        Coney2.__super__.constructor.call(this, b);
        this.speed = (Math.random()) + 1.5;
        this.turnRad = 0.02;
        this.sprite = PIXI.Sprite.fromImage('res/Coney2.png');
        this.sprite.scale.x *= scl;
        this.sprite.scale.y *= scl;
        this.sprite.scale.x *= -1;
        this.draw();
      }

      Coney2.prototype.print = function() {
        return console.log("Coney 2");
      };

      Coney2.prototype.getCaught = function() {
        Coney2.__super__.getCaught.call(this);
        fishCaught.Coney2++;
        return displayCatch("Coney2");
      };

      return Coney2;

    })(Fish);
    Coney3 = (function(superClass) {
      var scl;

      extend(Coney3, superClass);

      scl = 0.2;

      function Coney3(b) {
        if (b == null) {
          b = false;
        }
        Coney3.__super__.constructor.call(this, b);
        this.speed = (Math.random()) + 1.5;
        this.turnRad = 0.05;
        this.sprite = PIXI.Sprite.fromImage('res/Coney3.png');
        this.sprite.scale.x *= scl;
        this.sprite.scale.y *= scl;
        this.sprite.scale.x *= -1;
        this.draw();
      }

      Coney3.prototype.print = function() {
        return console.log("Coney 3");
      };

      Coney3.prototype.getCaught = function() {
        Coney3.__super__.getCaught.call(this);
        fishCaught.Coney3++;
        return displayCatch("Coney3");
      };

      return Coney3;

    })(Fish);
    LionFish = (function(superClass) {
      var scl;

      extend(LionFish, superClass);

      scl = 0.5;

      function LionFish(b) {
        if (b == null) {
          b = false;
        }
        LionFish.__super__.constructor.call(this, b);
        this.speed = (Math.random()) + 1;
        this.turnRad = 0.07;
        this.sprite = PIXI.Sprite.fromImage('res/LionFish.png');
        this.sprite.scale.x *= -1;
        this.sprite.scale.x *= scl;
        this.sprite.scale.y *= scl;
        this.draw();
      }

      LionFish.prototype.print = function() {
        return console.log("Lion Fish");
      };

      LionFish.prototype.getCaught = function() {
        LionFish.__super__.getCaught.call(this);
        fishCaught.LionFish++;
        return displayCatch("LionFish");
      };

      return LionFish;

    })(Fish);
    SpottedHog = (function(superClass) {
      var scl;

      extend(SpottedHog, superClass);

      scl = 0.2;

      function SpottedHog(b) {
        if (b == null) {
          b = false;
        }
        SpottedHog.__super__.constructor.call(this, b);
        this.speed = (Math.random()) + 2;
        this.turnRad = 0.05;
        this.sprite = PIXI.Sprite.fromImage('res/SpottedHog.png');
        this.sprite.scale.x *= scl;
        this.sprite.scale.y *= scl;
        this.sprite.scale.x *= -1;
        this.draw();
      }

      SpottedHog.prototype.print = function() {
        return console.log("SPOTTED HOG");
      };

      SpottedHog.prototype.getCaught = function() {
        SpottedHog.__super__.getCaught.call(this);
        fishCaught.SpottedHog++;
        return displayCatch("SpottedHog");
      };

      return SpottedHog;

    })(Fish);
    MahiMahi = (function(superClass) {
      var scl;

      extend(MahiMahi, superClass);

      scl = .75;

      function MahiMahi(b) {
        if (b == null) {
          b = false;
        }
        MahiMahi.__super__.constructor.call(this, b);
        this.speed = (Math.random()) + 1.5;
        this.turnRad = 0.01;
        this.sprite = PIXI.Sprite.fromImage('res/MahiMahi.png');
        this.sprite.scale.x *= scl;
        this.sprite.scale.y *= scl;
        this.sprite.scale.x *= -1;
        this.draw();
      }

      MahiMahi.prototype.print = function() {
        return console.log("MahiMahi");
      };

      MahiMahi.prototype.getCaught = function() {
        MahiMahi.__super__.getCaught.call(this);
        fishCaught.MahiMahi++;
        return displayCatch("MahiMahi");
      };

      return MahiMahi;

    })(Fish);
    WhaleShark = (function(superClass) {
      var scl;

      extend(WhaleShark, superClass);

      scl = 0.9;

      function WhaleShark(b) {
        if (b == null) {
          b = false;
        }
        WhaleShark.__super__.constructor.call(this, b);
        this.speed = (Math.random()) + 2;
        this.turnRad = 0.01;
        this.sprite = PIXI.Sprite.fromImage('res/WhaleShark.png');
        this.sprite.scale.x *= scl;
        this.sprite.scale.y *= scl;
        this.sprite.scale.x *= -1;
        this.draw();
      }

      WhaleShark.prototype.print = function() {
        return console.log("Whale Shark");
      };

      WhaleShark.prototype.getCaught = function() {
        WhaleShark.__super__.getCaught.call(this);
        fishCaught.WhaleShark++;
        return displayCatch("WhaleShark");
      };

      return WhaleShark;

    })(Fish);
    Level = (function() {
      Level.numLevels = 5;

      function Level(num) {
        if (num === 0) {
          this.spawnRates = {
            Coney1: 2,
            Coney2: 2,
            Coney3: 2,
            JackRainbowFish: 0,
            LionFish: 2,
            MahiMahi: 0,
            Marlin: 0,
            SpottedHog: 2,
            WhaleShark: 0
          };
          this.goals = {
            Coney1: 2,
            Coney2: 2,
            Coney3: 2,
            JackRainbowFish: 0,
            MahiMahi: 0,
            Marlin: 0,
            SpottedHog: 0,
            WhaleShark: 0
          };
          this.depth = 1000;
        }
        if (num === 1) {
          this.spawnRates = {
            Coney1: 2,
            Coney2: 2,
            Coney3: 2,
            JackRainbowFish: 1,
            LionFish: 2,
            MahiMahi: 1,
            Marlin: 0,
            SpottedHog: 1,
            WhaleShark: 0
          };
          this.goals = {
            Coney1: 2,
            Coney2: 2,
            Coney3: 2,
            JackRainbowFish: 0,
            MahiMahi: 1,
            Marlin: 0,
            SpottedHog: 0,
            WhaleShark: 0
          };
          this.depth = 1500;
        }
        if (num === 2) {
          this.spawnRates = {
            Coney1: 2,
            Coney2: 1,
            Coney3: 1,
            JackRainbowFish: 1,
            LionFish: 2,
            MahiMahi: 1,
            Marlin: 0,
            SpottedHog: 4,
            WhaleShark: 0
          };
          this.goals = {
            Coney1: 1,
            Coney2: 1,
            Coney3: 1,
            JackRainbowFish: 0,
            MahiMahi: 0,
            Marlin: 0,
            SpottedHog: 4,
            WhaleShark: 0
          };
          this.depth = 1750;
        }
        if (num === 3) {
          this.spawnRates = {
            Coney1: 2,
            Coney2: 1,
            Coney3: 1,
            JackRainbowFish: 3,
            LionFish: 2,
            MahiMahi: 2,
            Marlin: 0,
            SpottedHog: 2,
            WhaleShark: 3
          };
          this.goals = {
            Coney1: 2,
            Coney2: 1,
            Coney3: 1,
            JackRainbowFish: 2,
            MahiMahi: 2,
            Marlin: 0,
            SpottedHog: 0,
            WhaleShark: 0
          };
          this.depth = 2000;
        }
        if (num === 4) {
          this.spawnRates = {
            Coney1: 1,
            Coney2: 1,
            Coney3: 2,
            JackRainbowFish: 2,
            LionFish: 2,
            MahiMahi: 2,
            Marlin: 2,
            SpottedHog: 2,
            WhaleShark: 3
          };
          this.goals = {
            Coney1: 1,
            Coney2: 1,
            Coney3: 2,
            JackRainbowFish: 1,
            MahiMahi: 0,
            Marlin: 1,
            SpottedHog: 2,
            WhaleShark: 0
          };
          this.depth = 1750;
        }
      }

      return Level;

    })();
    checkLevelWon = function() {
      var ref, type, val;
      if (!((typeof currentLevel !== "undefined" && currentLevel !== null) && (fishCaught != null))) {
        return;
      }
      ref = currentLevel.goals;
      for (type in ref) {
        val = ref[type];
        if (fishCaught[type] < val) {
          return;
        }
      }
      return winLevel();
    };
    document.addEventListener('keydown', function(event) {
      if (event.keyCode === 37) {
        hook.velocity.x = -Hook.speed;
      }
      if (event.keyCode === 39) {
        hook.velocity.x = Hook.speed;
      }
      if (event.keyCode === 38) {
        hook.velocity.y = -Hook.speed;
      }
      if (event.keyCode === 40) {
        return hook.velocity.y = Hook.speed;
      }
    });
    document.addEventListener('keyup', function(event) {
      if ((event.keyCode === 37 && hook.velocity.x < 0) || (event.keyCode === 39 && hook.velocity.x > 0)) {
        hook.velocity.x = 0;
      }
      if ((event.keyCode === 38 && hook.velocity.y < 0) || (event.keyCode === 40 && hook.velocity.y > 0)) {
        return hook.velocity.y = 0;
      }
    });
    document.addEventListener('keypress', function(event) {
      if (gs != null) {
        gs.finish();
      }
      if (!levelActive) {
        playThenDoFunction();
      }
      if (event.keyCode === 112) {
        pause = !pause;
      }
      if (event.keyCode === 8) {
        startPlayingLevel(currentLevelNum);
      }
      if (levelActive && event.keyCode === 78) {
        return winLevel();
      }
    });
    currentLevel = new Level(0);
    clearScreen = function() {
      var j, l, len, ref;
      fish = [];
      bubbles = [];
      displSprites = [];
      ref = [guiLayer, fishLayer, topWaveLayer, backgroundLayer, boatLayer, cutScenesLayer];
      for (j = 0, len = ref.length; j < len; j++) {
        l = ref[j];
        l.removeChildren();
      }
      return typeof gui !== "undefined" && gui !== null ? gui.clear() : void 0;
    };
    TitleScreen = (function() {
      function TitleScreen() {
        var bigStyle, j, k, len, ref, regStyle, scl, titleSprite, type, val;
        for (type in gameStats) {
          val = gameStats[type];
          gameStats[type] = 0;
        }
        background = new Background(ASPECT_RATIO.height - Background.waterLevel + 70);
        if (random(0, 2) === 0) {
          fish.push(new JackRainbowFish(true));
        }
        if (random(0, 2) === 0) {
          fish.push(new Marlin(true));
        }
        if (random(0, 2) === 0) {
          fish.push(new Coney1(true));
        }
        if (random(0, 2) === 0) {
          fish.push(new Coney2(true));
        }
        if (random(0, 2) === 0) {
          fish.push(new Coney3(true));
        }
        if (random(0, 2) === 0) {
          fish.push(new LionFish(true));
        }
        if (random(0, 2) === 0) {
          fish.push(new SpottedHog(true));
        }
        if (random(0, 2) === 0) {
          fish.push(new MahiMahi(true));
        }
        if (random(0, 2) === 0) {
          fish.push(new WhaleShark(true));
        }
        titleSprite = PIXI.Sprite.fromImage("res/Title.png");
        scl = ASPECT_RATIO.width * 2 / 3 / titleSprite.width;
        titleSprite.scale.set(scl);
        titleSprite.anchor.set(.5);
        titleSprite.x = ASPECT_RATIO.width / 2;
        titleSprite.y = ASPECT_RATIO.height / 2;
        guiLayer.addChild(titleSprite);
        regStyle = new PIXI.TextStyle({
          fontSize: 60,
          fontFamily: "'Press Start 2P', cursive",
          fill: "#ffffff",
          stroke: "#000000",
          strokeThickness: 5
        });
        bigStyle = new PIXI.TextStyle({
          fontSize: 72,
          fontFamily: "'Press Start 2P', cursive",
          fill: "#ffffff",
          stroke: "#000000",
          strokeThickness: 5
        });
        this.playButton = new PIXI.Text("PLAY", regStyle);
        this.tutorialButton = new PIXI.Text("HOW TO", regStyle);
        titleSprite.y -= this.playButton.height;
        ref = [this.playButton, this.tutorialButton];
        for (j = 0, len = ref.length; j < len; j++) {
          k = ref[j];
          k.interactive = true;
          k.buttonMode = true;
          k.anchor.set(.5);
          k.y = titleSprite.y + titleSprite.height / 2 + k.height / 2 + 10;
          guiLayer.addChild(k);
        }
        this.playButton.x = ASPECT_RATIO.width * 1 / 4;
        this.tutorialButton.x = ASPECT_RATIO.width * 3 / 4;
        this.playButton.on('pointerover', (function(_this) {
          return function() {
            _this.playButton.style = bigStyle;
            return (new Audio('res/Click.mp3')).play();
          };
        })(this));
        this.playButton.on('pointerout', (function(_this) {
          return function() {
            return _this.playButton.style = regStyle;
          };
        })(this));
        this.playButton.on('pointerdown', function() {
          return startLevel(0);
        });
        this.tutorialButton.on('pointerover', (function(_this) {
          return function() {
            _this.tutorialButton.style = bigStyle;
            return (new Audio('res/Click.mp3')).play();
          };
        })(this));
        this.tutorialButton.on('pointerout', (function(_this) {
          return function() {
            return _this.tutorialButton.style = regStyle;
          };
        })(this));
        this.tutorialButton.on('pointerdown', function() {
          return tutorial = new Tutorial;
        });
      }

      return TitleScreen;

    })();
    GameSummary = (function() {
      var padding, scrollRate;

      levelActive = false;

      scrollRate = 1.5;

      padding = 50;

      function GameSummary() {
        var i, j, len, len1, len2, len3, len4, len5, m, o, p, q, ref, ref1, ref2, ref3, ref4, s, str, strings, style, t;
        clearScreen();
        style = new PIXI.TextStyle({
          fontSize: 36,
          fontFamily: "'Press Start 2P', cursive",
          fill: "#ffffff",
          stroke: "#000000",
          strokeThickness: 5,
          wordWrap: true,
          wordWrapWidth: ASPECT_RATIO.width - 50
        });
        strings = ["---- GAME STATS ----", "FISH CAUGHT: " + gameStats.fishCaught, "ERRORS: " + gameStats.errors, "LION FISH CAUGHT: " + gameStats.lionfish, "BOOSTS ACQUIRED: " + gameStats.boosts, "DEATHS: " + gameStats.deaths, "", "---- CREDITS ----", "ART: FIONA OKUMU", "PROGRAMMING: JACOB SILCOFF", "MUSIC: AJ STENSLAND", "DOCUMENTATION: FRANCESCA CHU", "BEING/KNOWING/DOING: FREYA RYD", "", "Submitted to the 2017 National TSA Conference in Orlando, Florida, as an entry in the Video Game competition"];
        this.text = [];
        for (j = 0, len = strings.length; j < len; j++) {
          str = strings[j];
          this.text.push(new PIXI.Text(str, style));
        }
        ref = this.text;
        for (m = 0, len1 = ref.length; m < len1; m++) {
          t = ref[m];
          t.anchor.set(.5);
        }
        ref1 = this.text;
        for (o = 0, len2 = ref1.length; o < len2; o++) {
          t = ref1[o];
          cutScenesLayer.addChild(t);
        }
        ref2 = this.text;
        for (p = 0, len3 = ref2.length; p < len3; p++) {
          t = ref2[p];
          t.y = ASPECT_RATIO.height;
        }
        ref3 = this.text;
        for (q = 0, len4 = ref3.length; q < len4; q++) {
          t = ref3[q];
          t.x = ASPECT_RATIO.width / 2;
        }
        i = 0;
        ref4 = this.text;
        for (s = 0, len5 = ref4.length; s < len5; s++) {
          t = ref4[s];
          t.y += (this.text[0].height + padding) * i;
          i++;
        }
      }

      GameSummary.prototype.update = function() {
        var j, len, ref, t;
        ref = this.text;
        for (j = 0, len = ref.length; j < len; j++) {
          t = ref[j];
          t.y -= scrollRate;
        }
        if (this.text[this.text.length - 1].y <= -50) {
          return this.finish();
        }
      };

      GameSummary.prototype.finish = function() {
        clearScreen();
        gs = null;
        return new TitleScreen;
      };

      return GameSummary;

    })();
    GUI = (function() {
      function GUI() {
        this.box = PIXI.Sprite.fromImage('res/GUI.png');
        this.box.x = 0;
        this.box.y = 0;
        this.box.alpha = .9;
        guiLayer.addChild(this.box);
        this.gd = new GoalDisplay();
        this.dd = new DeathDisplay();
      }

      GUI.prototype.update = function() {
        return this.gd.update();
      };

      GUI.prototype.clear = function() {
        this.gd.clear();
        this.dd.clear();
        return guiLayer.removeChild(this.box);
      };

      return GUI;

    })();
    GoalDisplay = (function(superClass) {
      var itemPaddingX, itemPaddingY, itemWidth, itemsPerLine;

      extend(GoalDisplay, superClass);

      itemWidth = 60;

      itemPaddingX = 5;

      itemPaddingY = -7;

      itemsPerLine = 4;

      function GoalDisplay() {
        var i, j, ref, ref1, scl, spr, type, val;
        GoalDisplay.__super__.constructor.call(this);
        guiLayer.addChild(this);
        this.sprites = [];
        this.x = 20;
        this.y = 55;
        ref = currentLevel.goals;
        for (type in ref) {
          val = ref[type];
          for (i = j = 0, ref1 = val; 0 <= ref1 ? j < ref1 : j > ref1; i = 0 <= ref1 ? ++j : --j) {
            spr = PIXI.Sprite.fromImage("res/" + type + ".png");
            scl = itemWidth / spr.width;
            spr.scale.set(scl);
            this.addChild(spr);
            this.sprites.push(spr);
            spr.alpha = .25;
            spr.x = (itemPaddingX + itemWidth) * ((this.sprites.length - 1) % itemsPerLine);
            spr.y = (itemPaddingY + itemWidth) * (Math.floor((this.sprites.length - 1) / itemsPerLine));
          }
        }
      }

      GoalDisplay.prototype.update = function() {
        var count, i, index, ref, results, type, val;
        index = 0;
        ref = currentLevel.goals;
        results = [];
        for (type in ref) {
          val = ref[type];
          count = fishCaught != null ? fishCaught[type] : 0;
          results.push((function() {
            var j, ref1, results1;
            results1 = [];
            for (i = j = 0, ref1 = val; 0 <= ref1 ? j < ref1 : j > ref1; i = 0 <= ref1 ? ++j : --j) {
              if (count > 0) {
                this.sprites[index].alpha = 1;
              }
              count--;
              results1.push(index++);
            }
            return results1;
          }).call(this));
        }
        return results;
      };

      GoalDisplay.prototype.clear = function() {
        var j, len, ref, spr;
        ref = this.sprites;
        for (j = 0, len = ref.length; j < len; j++) {
          spr = ref[j];
          this.removeChild(spr);
        }
        return this.destroy;
      };

      return GoalDisplay;

    })(PIXI.Container);
    DeathDisplay = (function(superClass) {
      extend(DeathDisplay, superClass);

      DeathDisplay.itemWidth = 70;

      DeathDisplay.itemPadding = 10;

      function DeathDisplay() {
        DeathDisplay.__super__.constructor.call(this);
        guiLayer.addChild(this);
        this.sprites = [];
        this.x = 26;
        this.y = 214;
      }

      DeathDisplay.prototype.add = function(type) {
        var scl, spr;
        if (this.sprites.length >= 3) {
          loseLevel(currentLevelNum);
          console.log("death");
          return;
        }
        spr = PIXI.Sprite.fromImage("res/" + type + ".png");
        scl = DeathDisplay.itemWidth / spr.width;
        spr.scale.set(scl);
        this.addChild(spr);
        this.sprites.push(spr);
        spr.y = 0;
        return spr.x = (DeathDisplay.itemPadding + DeathDisplay.itemWidth) * (this.sprites.length - 1);
      };

      DeathDisplay.prototype.clear = function() {
        var j, len, ref, spr;
        ref = this.sprites;
        for (j = 0, len = ref.length; j < len; j++) {
          spr = ref[j];
          this.removeChild(spr);
        }
        return this.destroy;
      };

      return DeathDisplay;

    })(PIXI.Container);
    gui = void 0;
    music = new Audio('res/MainLoop.mp3');
    
    music.loop = true;
    
    ;
    playThenDo = function(videoSrc, task) {
      var tex, vid;
      clearScreen();
      levelActive = false;
      tex = PIXI.Texture.fromVideo(videoSrc);
      vid = new PIXI.Sprite(tex);
      vid.width = ASPECT_RATIO.width;
      vid.height = ASPECT_RATIO.height;
      cutScenesLayer.addChild(vid);
      playThenDoFunction = function() {
        playThenDoFunction = function() {};
        tex.baseTexture.source.pause();
        clearScreen();
        return task();
      };
      return tex.baseTexture.source.addEventListener('ended', function() {
        return playThenDoFunction();
      });
    };
    startLevel = function(n) {
      return playThenDo("res/vids/o" + n + ".mp4", function() {
        return startPlayingLevel(n);
      });
    };
    startPlayingLevel = function(n) {
      var type;
      music.load();
      music.play();
      currentLevelNum = n;
      currentLevel = new Level(n);
      clearScreen();
      background = new Background(currentLevel.depth);
      fish = [];
      bubbles = [];
      for (type in fishCaught) {
        fishCaught[type] = 0;
      }
      hook = new Hook();
      gui = new GUI();
      displayLevel();
      return levelActive = true;
    };
    nextLevel = function() {
      if (currentLevelNum + 1 < Level.numLevels) {
        currentLevelNum++;
        return startLevel(currentLevelNum);
      } else {
        currentLevelNum = null;
        return playThenDo("res/vids/game over.mp4", function() {
          return gs = new GameSummary;
        });
      }
    };
    winLevel = function() {
      music.pause();
      return playThenDo("res/vids/w" + currentLevelNum + ".mp4", function() {
        return nextLevel();
      });
    };
    loseLevel = function() {
      var n;
      gameStats.deaths++;
      n = currentLevelNum;
      music.pause();
      return playThenDo("res/vids/l" + n + ".mp4", function() {
        return startPlayingLevel(n);
      });
    };
    addFish = function() {
      var i, j, len, lim, lionCount, spreadRate;
      lim = 2000;
      spreadRate = 7;
      lionCount = 0;
      for (j = 0, len = fish.length; j < len; j++) {
        i = fish[j];
        if (i instanceof LionFish) {
          lionCount += 1;
        }
      }
      if (lionCount * spreadRate > random(0, lim)) {
        replace(fish[random(0, fish.length)]);
      }
      if (currentLevel.spawnRates.Coney1 > random(0, lim)) {
        fish.push(new Coney1);
      }
      if (currentLevel.spawnRates.Coney2 > random(0, lim)) {
        fish.push(new Coney2);
      }
      if (currentLevel.spawnRates.Coney3 > random(0, lim)) {
        fish.push(new Coney3);
      }
      if (currentLevel.spawnRates.SpottedHog > random(0, lim)) {
        fish.push(new SpottedHog);
      }
      if (currentLevel.spawnRates.MahiMahi > random(0, lim)) {
        fish.push(new MahiMahi);
      }
      if (currentLevel.spawnRates.WhaleShark > random(0, lim)) {
        fish.push(new WhaleShark);
      }
      if (currentLevel.spawnRates.Marlin > random(0, lim)) {
        fish.push(new Marlin);
      }
      if (currentLevel.spawnRates.JackRainbowFish > random(0, lim)) {
        fish.push(new JackRainbowFish);
      }
      if (currentLevel.spawnRates.LionFish > random(0, lim)) {
        return fish.push(new LionFish);
      }
    };
    replace = function(fsh) {
      var lion;
      lion = new LionFish();
      fish.push(lion);
      lion.x = fsh.x;
      lion.y = fsh.y;
      lion.rotation = fsh.rotation;
      fish.splice(fish.indexOf(fsh), 1);
      return fsh.clear();
    };
    pickupAudio = new Audio('res/pickup.wav');
    toomanyAudio = new Audio('res/buzzer.mp3');
    
    pickupAudio.loop = false
    toomanyAudio.loop = false
    ;
    displayLevel = function() {
      var str, style, txt;
      str = "LEVEL " + (currentLevelNum + 1);
      style = new PIXI.TextStyle({
        fontSize: 72,
        fontFamily: "'Press Start 2P', cursive",
        fill: "#ffffff",
        stroke: "#000000",
        strokeThickness: 5
      });
      txt = new PIXI.Text(str, style);
      displSprites.push(txt);
      guiLayer.addChild(txt);
      txt.anchor.set(.5, .5);
      txt.y = ASPECT_RATIO.height / 2;
      return txt.x = ASPECT_RATIO.width / 2;
    };
    displayCatch = function(type) {
      var i, j, len, padding, ref, scl, sprite, str, style, txt;
      gameStats.fishCaught++;
      padding = 50;
      if (((currentLevel.goals[type] == null) || currentLevel.goals[type] < fishCaught[type]) && type !== "LionFish") {
        str = "TOO MANY CAUGHT";
        gameStats.errors++;
        gui.dd.add(type);
        toomanyAudio.play();
      } else {
        pickupAudio.play();
        str = "" + fishCaught[type];
        if (type === "LionFish") {
          str = str + "/10 FOR BOOST";
          gameStats.lionfish++;
        }
        if ((currentLevel.goals[type] != null) && currentLevel.goals[type] >= fishCaught[type]) {
          str = str + "/" + currentLevel.goals[type] + " caught";
        }
      }
      style = new PIXI.TextStyle({
        fontSize: 36,
        fontFamily: "'Press Start 2P', cursive",
        wordWrap: true,
        wordWrapWidth: ASPECT_RATIO.width / 2 - padding * 1.5,
        fill: "#ffffff",
        stroke: "#000000",
        strokeThickness: 5
      });
      txt = new PIXI.Text(str, style);
      sprite = PIXI.Sprite.fromImage("res/" + type + ".png");
      ref = [sprite, txt];
      for (j = 0, len = ref.length; j < len; j++) {
        i = ref[j];
        displSprites.push(i);
        guiLayer.addChild(i);
        i.anchor.set(0, .5);
        i.y = ASPECT_RATIO.height / 2;
      }
      scl = (ASPECT_RATIO.width / 2 - padding * 1.5) / sprite.width;
      sprite.width *= scl;
      sprite.height *= scl;
      sprite.x = padding;
      txt.x = ASPECT_RATIO.width / 2 + padding * .5;
      return checkLevelWon();
    };
    clearScreen();
    playThenDo("res/vids/logo.mp4", function() {
      return playThenDo("res/vids/intro.mp4", function() {
        return new TitleScreen();
      });
    });
    return app.ticker.add(function(delta) {
      var b, dimRate, f, i, j, len, len1, len2, len3, m, o, p, toRemove;
      if (!pause) {
        for (j = 0, len = fish.length; j < len; j++) {
          f = fish[j];
          if (f != null) {
            f.update();
          }
        }
        for (m = 0, len1 = bubbles.length; m < len1; m++) {
          b = bubbles[m];
          if (b != null) {
            b.update();
          }
        }
        if (background != null) {
          background.update();
        }
        if (gs != null) {
          gs.update();
        }
        if (levelActive) {
          hook.update();
          hook.move(hook.velocity.x * delta, hook.velocity.y * delta);
          addFish();
          dimRate = .01;
          toRemove = [];
          for (o = 0, len2 = displSprites.length; o < len2; o++) {
            i = displSprites[o];
            if (i.alpha != null) {
              i.alpha -= dimRate * delta;
            }
            if (!((i.alpha != null) && i.alpha >= 0)) {
              guiLayer.removeChild(i);
              toRemove.push(i);
            }
          }
          for (p = 0, len3 = toRemove.length; p < len3; p++) {
            i = toRemove[p];
            displSprites.splice(displSprites.indexOf(i), 1);
          }
          return gui != null ? gui.update() : void 0;
        }
      }
    });
  };

}).call(this);
